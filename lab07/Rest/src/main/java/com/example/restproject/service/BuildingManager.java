package com.example.restproject.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.restproject.domain.Building;


public class BuildingManager {

    private Connection connection;

    private static final String URL = "jdbc:hsqldb:hsql://localhost/BuildingDB";
    private static final String CREATE_TABLE_BUILDING = "CREATE TABLE building (id BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1) PRIMARY KEY ,"
            + "name VARCHAR(30) NOT NULL, "
            + "FloorArea integer NOT NULL,"
            + "idOwner BIGINT FOREIGN KEY REFERENCES Owner(id) on delete set null);";

    private PreparedStatement addBuildingStmt;
    private PreparedStatement deleteAllBuildingsStmt;
    private PreparedStatement getAllBuildingsStmt;
    private PreparedStatement getBuildingByIdStmt;

    private Statement statement;

    public BuildingManager() {
        try {
            connection = DriverManager.getConnection(URL);
            statement = connection.createStatement();

            ResultSet rs = connection.getMetaData().getTables(null, null, null,
                    null);
            boolean tableExists = false;
            while (rs.next()) {
                if ("building".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                    tableExists = true;
                    break;
                }
            }

            if (!tableExists)
                statement.executeUpdate(CREATE_TABLE_BUILDING);

            addBuildingStmt = connection
                    .prepareStatement("INSERT INTO Building (id, name, FloorArea ,idOwner) VALUES (?, ?, ?, ?)");
            deleteAllBuildingsStmt = connection
                    .prepareStatement("DELETE FROM Building");
            getAllBuildingsStmt = connection
                    .prepareStatement("SELECT id, name, FloorArea FROM Building");
            getBuildingByIdStmt = connection
                    .prepareStatement("SELECT id, name, FloorArea FROM Building where id = ?");

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    Connection getConnection() {
        return connection;
    }

    public void clearBuildings() {
        try {
            deleteAllBuildingsStmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public int addBuilding(Building building) {
        int count = 0;
        try {
            addBuildingStmt.setLong(1, building.getId());
            addBuildingStmt.setString(2, building.getName());
            addBuildingStmt.setInt(3, building.getFloorArea());
            addBuildingStmt.setLong(4,building.getIdOwner());

            count = addBuildingStmt.executeUpdate();

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return count;
    }

    public List<Building> getAllBuildings() {
        List<Building> buildings = new ArrayList<Building>();

        try {
            ResultSet rs = getAllBuildingsStmt.executeQuery();

            while (rs.next()) {
                Building b = new Building();
                b.setId(rs.getInt("id"));
                b.setName(rs.getString("name"));
                b.setFloorArea(rs.getInt("FloorArea"));
                b.setIdOwner(rs.getLong("idOwner"));
                buildings.add(b);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return buildings;
    }

    public Building getBuilding(Long id) {
        Building b = new Building();
        try {
            getBuildingByIdStmt.setLong(1, id);
            ResultSet rs = getBuildingByIdStmt.executeQuery();

            while (rs.next()) {
                b.setId(rs.getInt("id"));
                b.setName(rs.getString("name"));
                b.setFloorArea(rs.getInt("FloorArea"));
                break;
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }

        return b;
    }

}
