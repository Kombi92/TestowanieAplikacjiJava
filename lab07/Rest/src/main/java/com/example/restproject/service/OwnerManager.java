package com.example.restproject.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.restproject.domain.Owner;

public class OwnerManager {

    private Connection connection;

    private static final String URL = "jdbc:hsqldb:hsql://localhost/BuildingDB";
    private static final String CREATE_TABLE_OWNER = "CREATE TABLE Owner(id bigint GENERATED BY DEFAULT AS IDENTITY UNIQUE , name varchar(20), yob integer)";

    private PreparedStatement addOwnerStmt;
    private PreparedStatement deleteAllOwnersStmt;
    private PreparedStatement deleteOwnerByIdStmt;
    private PreparedStatement getAllOwnersStmt;
    private PreparedStatement getOwnerByIdStmt;
    private PreparedStatement updateOwnerStmt;

    private Statement statement;

    public OwnerManager() {
        try {
            connection = DriverManager.getConnection(URL);
            statement = connection.createStatement();

            ResultSet rs = connection.getMetaData().getTables(null, null, null,
                    null);
            boolean tableExists = false;
            while (rs.next()) {
                if ("Owner".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                    tableExists = true;
                    break;
                }
            }

            if (!tableExists)
                statement.executeUpdate(CREATE_TABLE_OWNER);

            addOwnerStmt = connection
                    .prepareStatement("INSERT INTO Owner (id, name, yob) VALUES (?, ?, ?)");
            deleteAllOwnersStmt = connection
                    .prepareStatement("DELETE FROM Owner");
            getAllOwnersStmt = connection
                    .prepareStatement("SELECT id, name, yob FROM Owner");
            getOwnerByIdStmt = connection
                    .prepareStatement("SELECT id, name, yob FROM Owner where id = ?");
            deleteOwnerByIdStmt = connection
                    .prepareStatement("DELETE FROM Owner where id = ?");
            updateOwnerStmt = connection
                    .prepareStatement("UPDATE OWNER SET name = ? , yob = ? where id = ?");

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    Connection getConnection() {
        return connection;
    }

    public int updateOwner(Owner owner) {
        int count = 0;
        try {
            updateOwnerStmt.setString(1, owner.getFirstName());
            updateOwnerStmt.setInt(2, owner.getYob());
            updateOwnerStmt.setLong(3, owner.getId());

            count = updateOwnerStmt.executeUpdate();

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return count;
    }

    public void clearOwners() {
        try {
            deleteAllOwnersStmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void deleteOwner(Long id) {
        try {
            deleteOwnerByIdStmt.setLong(1, id);
            deleteOwnerByIdStmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public int addOwner(Owner owner) {
        int count = 0;
        try {
            addOwnerStmt.setLong(1, owner.getId());
            addOwnerStmt.setString(2, owner.getFirstName());
            addOwnerStmt.setInt(3, owner.getYob());

            count = addOwnerStmt.executeUpdate();

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return count;
    }

    public List<Owner> getAllOwners() {
        List<Owner> owners = new ArrayList<Owner>();

        try {
            ResultSet rs = getAllOwnersStmt.executeQuery();

            while (rs.next()) {
                Owner o = new Owner();
                o.setId(rs.getInt("id"));
                o.setFirstName(rs.getString("name"));
                o.setYob(rs.getInt("yob"));
                owners.add(o);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return owners;
    }

    public Owner getOwner(Long id) {
        Owner o = new Owner();
        try {
            getOwnerByIdStmt.setLong(1, id);
            ResultSet rs = getOwnerByIdStmt.executeQuery();

            while (rs.next()) {
                o.setId(rs.getInt("id"));
                o.setFirstName(rs.getString("name"));
                o.setYob(rs.getInt("yob"));
                break;
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }

        return o;
    }

}
